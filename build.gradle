plugins {
  id 'java-library'
  id 'maven-publish'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.4'
  id 'org.owasp.dependencycheck' version '9.2.0'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '5.1.0.4882'
  id "org.flywaydb.flyway" version "9.22.3"
}

group = 'com.github.hmcts'
version = '1.1.5'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/functionalTest/java')
    }
    resources.srcDir file('src/functionalTest/resources')
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/smokeTest/java')
    }
    resources.srcDir file('src/smokeTest/resources')
  }
}

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile) {
  // options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()
  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

task functional(type: Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

task smoke(type: Test) {
  description = "Runs Smoke Tests"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.26.1'
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "6.55.0"
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = []
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
project.tasks['check'].dependsOn integration

sonarqube {
  properties {
    property "sonar.projectName", "Juror :: spring-support-library"
    property "sonar.projectKey", "uk.gov.hmcts.juror:spring-support-library"
  }
}

dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf {
    isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)
  }
}

dependencyCheck {
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    assemblyEnabled = false
  }
  skipConfigurations = [
    "checkstyle", "compileOnly", "pmd",
    "integrationTest", "functionalTest", "smokeTest",
    "contractTestRuntimeClasspath", "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = uri('https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1')
  }
}

ext {
  springVersion = "3.5.4"
  log4JVersion = "2.25.1"
  jwtVersion = "0.12.6"
  lombokVersion = "1.18.38"
  mapstructVersion = "1.6.3"
  logbackVersion = "1.5.18"
  snakeyamlVersion = '2.0'
}

ext['snakeyaml.version'] = '2.0'

dependencies {
  implementation "org.springframework.boot:spring-boot-starter-web:$springVersion"
  implementation "org.springframework.boot:spring-boot-starter-actuator:$springVersion"
  implementation "org.springframework.boot:spring-boot-starter-aop:$springVersion"
  implementation "org.springframework.boot:spring-boot-starter-json:$springVersion"
  implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springVersion"
  implementation "org.springframework.boot:spring-boot-starter-validation:$springVersion"
  implementation "org.springframework.boot:spring-boot-starter-security:$springVersion"
  implementation "org.springframework.boot:spring-boot-starter-web-services:$springVersion"
  implementation "org.springframework.data:spring-data-commons:3.5.2"

  implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.10"
  implementation "com.github.hmcts.java-logging:logging:6.1.9"

  implementation "org.apache.logging.log4j:log4j-api:$log4JVersion"
  implementation "org.apache.logging.log4j:log4j-to-slf4j:$log4JVersion"


  implementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'

  implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.4'
  implementation 'org.apache.httpcomponents.core5:httpcore5:5.3.1'

  implementation 'io.rest-assured:rest-assured:5.5.6'

  implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
  implementation 'org.postgresql:postgresql:42.7.7'
  implementation 'org.hibernate.orm:hibernate-envers:6.6.26.Final'
  implementation 'org.flywaydb:flyway-core:9.22.3'

  implementation 'org.projectlombok:lombok:1.18.38'
  annotationProcessor 'org.projectlombok:lombok:1.18.38'
  implementation 'org.jetbrains:annotations:24.1.0'

  implementation 'org.mapstruct:mapstruct:1.6.3'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

  compileOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'

  implementation 'io.jsonwebtoken:jjwt-api:0.12.7'
  runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.7'
  runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'


  // Web requests
  implementation 'org.springframework:spring-webflux:6.2.10'


  testImplementation platform('org.junit:junit-bom:5.13.4')
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testImplementation("org.springframework.boot:spring-boot-starter-test:$springVersion") {
    exclude group: 'junit', module: 'junit'
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation 'junit:junit:4.13.2'

  implementation 'ch.qos.logback:logback-classic:1.5.18'
  implementation 'ch.qos.logback:logback-core:1.5.18'
}

bootJar {
  enabled = false
}

jar {
  enabled = true
  archiveBaseName = "juror-spring-support-library"
  archiveVersion = project.version
}

flyway {
  def dbHost = System.getenv("DB_HOST") ?: "localhost"
  def dbPort = System.getenv("DB_PORT") ?: "5433"
  def dbName = System.getenv("DB_NAME") ?: "support_library"
  def dbUserName = System.getenv("DB_USER_NAME") ?: "postgres"
  def dbPassword = System.getenv("DB_PASSWORD") ?: "postgres"

  url = "jdbc:postgresql://$dbHost:$dbPort/$dbName"
  user = dbUserName
  password = dbPassword
  defaultSchema = 'support_library'
  table = 'schema_history'
  cleanDisabled = false
}

project.tasks['integration'].dependsOn flywayClean
project.tasks['integration'].dependsOn flywayMigrate

publishing {
  repositories {
    maven {
      name = "AzureArtifacts"
      url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
      credentials {
        username = System.getenv("AZURE_DEVOPS_ARTIFACT_USERNAME")
        password = System.getenv("AZURE_DEVOPS_ARTIFACT_TOKEN")
      }
    }
  }
  publications {
    Main(MavenPublication) {
      from components.java
      groupId = project.group
      artifactId = 'juror-spring-support-library'
      version = project.version
    }
  }
}

task runAllStyleChecks {
  dependsOn 'checkstyleMain', 'checkstyleTest', 'checkstyleIntegrationTest', 'checkstyleSmokeTest', 'checkstyleFunctionalTest'
  dependsOn 'pmdMain', 'pmdTest', 'pmdIntegrationTest', 'pmdSmokeTest', 'pmdFunctionalTest'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

tasks.named('processIntegrationTestResources') {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
